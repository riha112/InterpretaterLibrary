# ----------Hello world program using unsafe-string----------
print_line: Hello world
print_line

# ----------Setting variable & printing it----------
set var_num as number: 5
print_line: "Variables 'var_num' value is :": var_num
print_line

# ----------Chain actions with priority brackets----------
print_line: (set b as number: 9)
print_line

# ----------Safe string stored in queues----------
print_line: "set x as text: print_line: compare.equal: a: b"
print_line: "Previous action didn't execute because it was stored in safe string, thus x=": x
print_line

# ----------Compressions----------
set comp_a as text: 9
set comp_b as number: 9
print_line: "A === B: ":        (compare.equal: comp_a: comp_b)
print_line: "A TYPE SAME B: ":  (compare.equal_type: comp_a: comp_b)
print_line: "A VALUE SAME B: ": (compare.equal_value: comp_a: comp_b)
print_line:

# ----------Simple array----------
set arr as array: [5,abcd,[22,43,[vvvv,bbb],true]]
print_line: "Array: ": arr
print_line: "Array length is: ": (array.length: arr)
print_line

# ----------Sub-array----------
print_line: "Sub-array of array is: ": (array.get: arr: 2)
print_line: "Sub-array length is: ": (array.length: array.get: arr: 2)
print_line


# ----------Multiplication table----------
print_line: "Multiplication table:"
print_line
set x as number: 1
open while: x < 10
	set y as number: 1
	open while: y < 10
		set m as number: x * y
		open check: m < 10
			print: 0
		close
		print: m: " | "
		y += 1
	close
	print_line
	x += 1
close


# ----------Fibonacci sequence----------
print_line: Fibonacci sequence
set a as number: 0
set b as number: 1

set l0 as number: 0
open while: compare.smaller: l0: 20
	
	set tmp as number: arithmetic.sum: a: b
	print_line: tmp
	set a as number: b
	set b as number: tmp

	add: l0: 1
close
print_line

# ----------Factorial----------
print_line: Factorial
set a as number: 0
set b as number: 1

set l0 as number: 0
open while: l0 < 10
	print_line
	print: l0: "!="

	set l1 as number: 2
	set m as number: 1
	open while: l1 < l0 + 1
		
		set m as number: m * l1
		l1 += 1

	close
	print: m

	l0 += 1
close
print_line

# ----------Reference variable----------
set ref as reference: array.get: arr: 2
print_line: ref
print_line

# ----------Sorting----------
print_line: Sorting
set unsorted_array as array: [4,1,66,43,2,61,-10]
print_line: "Unsorted array: ": unsorted_array

set l0 as number: 0
open while: l0 < array.length: unsorted_array
	set l1 as number: l0 + 1
	set max_id as number: l0
	open while: l1 < array.length: unsorted_array
		set o0 as reference: array.get: unsorted_array: l0
		set o1 as reference: array.get: unsorted_array: l1
		open check: o0 > o1
			set tmp as number: o0
			o0 = o1
			o1 = tmp
		close
		l1 += 1
	close
	l0 += 1
close

print_line: "Sorted array: ": unsorted_array
